import numpy as npimport bwnumbergenimport randomimport mathdef ProjectDocuments(documents, proj_matrix, proj_space_dim, number_of_documents):  r_mat = np.zeros(shape = (proj_space_dim, number_of_documents))  # ProjMatrix(n.d) * Documents(d.D) = ProjectedDocuments(n.D)  # for each doc  for doc_id in range(number_of_documents):    # for each word    for word_id, count_w in documents[doc_id].items():      # for each dimension in projected space      for id_v in range(proj_space_dim):        r_mat[id_v, doc_id] = r_mat[id_v, doc_id] + (float(count_w) * proj_matrix[id_v, word_id])  return r_matdef GenerateAndProjectDocumentsAchiloptas(documents, proj_space, number_docs, word_count):  r_mat = np.zeros(shape = (proj_space, number_docs))  W_line = np.zeros(shape = (word_count))  for id_v in range(proj_space):    # Generate Line    for j in range(word_count):      W_line[j] = bwnumbergen.RandomGenAchiloptasValue(random.random())    # for each document    for doc_id in range(number_docs):      # Get Items (For Each Word)      for word_id, count_w in documents[doc_id].items():        r_mat[id_v, doc_id] = r_mat[id_v, doc_id] + (float(count_w) * W_line[word_id])  return r_matdef GenerateAndProjectDocumentsRandomGeneration(documents, proj_space, number_docs, word_count):  r_mat = np.zeros(shape = (proj_space, number_docs))  s_dev = math.sqrt(1.0/float(proj_space))  W_line = np.zeros(shape = (word_count))    for id_v in range(proj_space):    # Generate Line    for j in range(word_count):      W_line[j] = bwnumbergen.RandomGenGaussianValue(random.random(), 0.0, s_dev)                # for each document    for doc_id in range(number_docs):      # Get Items (For Each Word)      for word_id, count_w in documents[doc_id].items():        r_mat[id_v, doc_id] = r_mat[id_v, doc_id] + (float(count_w) * W_line[word_id])  return r_mat