# 1. Baixe o dataset Bag of Words da UCI (arquivo NyTimes). Cerca de 300k docs e vocabulario com 102650 termos# 2. Crie uma bag of words para os 3000 primeiros documentos# 3. Calcule a distancia entre cada par de pontos atraves da forca bruta e messa o tempo computacional deste procedimento. Armazene estes valores. Utilize dois loops para fazer isso e implemente o calculo da distancia# TODO# 4. Para n = 4, 16, 64, 256, 1024, 4096, 15768, repita o procedimento abaixo 30 vezes  # Obtenha uma matriz aleatoria de n linhas e d colunas pelo m´etodo de Achiloptas e pelo metodo dado em aula, onde d e o tamanho do vocaulario.  # Messa o tempo computacional da geracao das matrizes  # Projete os 3000 documentos no espaco Rn atraves das matrizes geradas. Messa o tempo da projecao  # Messa o tempo para obter todas as distancias entre os pontos projetados  # Calcule a distors˜ao maxima em relacao aos dados originais.  # Calcule o limite superior da distorsao previsto pelo Lema de J.L.# 5. Escreva um relatorio descrevendo os experimentos e os resultados obtidos. Analise se os resultados obtidos estao de acordo com a teoria apresentada. Considere a media, o maximo e o mınimo dos 30 experimentos do item 4.import timeimport mathimport randomimport bw_readers# id's considered to start by 1############ 2DOCWORD_FILE = "../docword.nytimes.txt"VOCAB_FILE = "vocab.nytimes.txt"word_list = bw_readers.ReadVocabulary(VOCAB_FILE)D_t_work = 3000table_docs = bw_readers.ReadDocuments(DOCWORD_FILE, D_t_work)documents = table_docs[0]D = table_docs[1]W = table_docs[2]NNZ = table_docs[3]DistanceMatrix = [[0 for x in range(D_t_work)] for y in range(D_t_work)]start_clock = time.clock()for x in range(1, D_t_work + 1):  for y in range(x, D_t_work + 1):    DistanceMatrix[x - 1][y - 1] = DocEuclidianDistance(x, y, documents, W)    # TODO: remove this    DistanceMatrix[y - 1][x - 1] = DistanceMatrix[x - 1][y - 1]finish_clock = time.clock()print(finish_clock - start_clock)